[{"C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\index.tsx":"1","C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\reportWebVitals.ts":"2","C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\App.tsx":"3","C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\components\\scheduler.tsx":"4","C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\db\\appointments.ts":"5","C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\db\\resources.ts":"6","C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\services\\reservations.ts":"7","C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\components\\schedulerClass.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":208,"mtime":1611732800546,"results":"12","hashOfConfig":"10"},{"size":7762,"mtime":1611745455996,"results":"13","hashOfConfig":"10"},{"size":3754,"mtime":1611723395970,"results":"14","hashOfConfig":"10"},{"size":593,"mtime":1611659607955,"results":"15","hashOfConfig":"10"},{"size":779,"mtime":1611725598899,"results":"16","hashOfConfig":"10"},{"size":14762,"mtime":1611732705722,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1n32v22",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\index.tsx",[],[],"C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\reportWebVitals.ts",["39"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\App.tsx",["40"],"import React from 'react';\nimport './App.css';\nimport Scheduler from  \"./components/scheduler\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Scheduler/>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\components\\scheduler.tsx",["41","42","43","44","45","46","47","48","49"],"import * as React from 'react';\r\nimport { ViewState, EditingState, ChangeSet } from '@devexpress/dx-react-scheduler';\r\nimport {\r\n  Scheduler, DayView, Appointments, MonthView, Toolbar,\r\n  DateNavigator, ViewSwitcher, TodayButton, Resources, AppointmentTooltip,DragDropProvider, WeekView, EditRecurrenceMenu, ConfirmationDialog, AppointmentForm\r\n} from '@devexpress/dx-react-scheduler-material-ui';\r\nimport { withStyles, Theme, createStyles, Fab, makeStyles } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { indigo, blue, teal } from '@material-ui/core/colors';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport { WithStyles, useTheme } from '@material-ui/styles';\r\nimport classNames from 'clsx';\r\nimport {resources} from \"../db/resources\";\r\nimport resService,{ReservationsAttributes} from '../services/reservations'\r\n\r\n\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  appointment: {\r\n    borderRadius: 0,\r\n    borderBottom: 0,\r\n  },\r\n  highPriorityAppointment: {\r\n    borderLeft: `4px solid ${teal[500]}`,\r\n  },\r\n  mediumPriorityAppointment: {\r\n    borderLeft: `4px solid ${blue[500]}`,\r\n  },\r\n  lowPriorityAppointment: {\r\n    borderLeft: `4px solid ${indigo[500]}`,\r\n  },\r\n  weekEndCell: {\r\n    backgroundColor: fade(theme.palette.action.disabledBackground, 0.04),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.action.disabledBackground, 0.04),\r\n    },\r\n    '&:focus': {\r\n      backgroundColor: fade(theme.palette.action.disabledBackground, 0.04),\r\n    },\r\n  },\r\n  weekEndDayScaleCell: {\r\n    backgroundColor: fade(theme.palette.action.disabledBackground, 0.06),\r\n  },\r\n  text: {\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  content: {\r\n    opacity: 0.7,\r\n  },\r\n  container: {\r\n    width: '100%',\r\n    lineHeight: 1.2,\r\n    height: '100%',\r\n  },\r\n  \r\n});\r\n\r\ntype AppointmentProps = Appointments.AppointmentProps & WithStyles<typeof styles>;\r\ntype AppointmentContentProps = Appointments.AppointmentContentProps & WithStyles<typeof styles>;\r\ntype TimeTableCellProps = MonthView.TimeTableCellProps & WithStyles<typeof styles>;\r\ntype DayScaleCellProps = MonthView.DayScaleCellProps & WithStyles<typeof styles>;\r\n\r\nconst isWeekEnd = (date: Date): boolean => date.getDay() === 0 || date.getDay() === 6;\r\nconst defaultCurrentDate = new Date(2018, 6, 2, 11, 15);\r\n\r\nconst DayScaleCell = withStyles(styles)(({\r\n  startDate, classes, ...restProps\r\n}: DayScaleCellProps) => (\r\n  <MonthView.DayScaleCell\r\n    className={classNames({\r\n      [classes.weekEndDayScaleCell]: isWeekEnd(startDate),\r\n    })}\r\n    startDate={startDate}\r\n    {...restProps}\r\n  />\r\n));\r\n\r\nconst TimeTableCell = withStyles(styles)((\r\n  { startDate, classes, ...restProps }: TimeTableCellProps,\r\n) => (\r\n  <MonthView.TimeTableCell\r\n    className={classNames({\r\n      [classes.weekEndCell]: isWeekEnd(startDate!),\r\n    })}\r\n    startDate={startDate}\r\n    {...restProps}\r\n  />\r\n));\r\n\r\nconst Appointment = withStyles(styles)(({\r\n  classes, data, ...restProps\r\n}: AppointmentProps) => (\r\n  <Appointments.Appointment\r\n    {...restProps}\r\n    className={classNames({\r\n      [classes.highPriorityAppointment]: data.priority === 1,\r\n      [classes.mediumPriorityAppointment]: data.priority === 2,\r\n      [classes.lowPriorityAppointment]: data.priority === 3,\r\n      [classes.appointment]: true,\r\n    })}\r\n    data={data}\r\n  />\r\n));\r\n\r\n// #FOLD_BLOCK\r\nconst AppointmentContent = withStyles(styles, { name: 'AppointmentContent' })(({\r\n  classes, data, ...restProps\r\n  // #FOLD_BLOCK\r\n}: AppointmentContentProps) =>  {\r\n  let priority = 'low';\r\n  if (data.priority === 2) priority = 'medium';\r\n  if (data.priority === 3) priority = 'high';\r\n  return (\r\n    <Appointments.AppointmentContent {...restProps} data={data}>\r\n      <div className={classes.container}>\r\n        <div className={classes.text}>\r\n          {data.title}\r\n        </div>\r\n        <div className={classNames(classes.text, classes.content)}>\r\n          {`Priority: ${priority}`}\r\n        </div>\r\n        <div className={classNames(classes.text, classes.content)}>\r\n          {`Location: ${data.location}`}\r\n        </div>\r\n      </div>\r\n    </Appointments.AppointmentContent>\r\n  );\r\n});\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    addButton: {\r\n      position: 'absolute',\r\n      bottom: theme.spacing(1) * 3,\r\n      right: theme.spacing(1) * 4,\r\n    },\r\n  })\r\n);\r\n\r\n const Reservation = () => {\r\n   const classes = useStyles();\r\n  const [data, setData] = React.useState<ReservationsAttributes[]>([]);\r\n  const [currentDate, setCurrentDate] = React.useState(defaultCurrentDate);\r\n  const [editingAppointment, setEditingAppointment] = React.useState();\r\n  const [addedAppointment, setAddedAppointment] = React.useState({});\r\n  const [appointmentChanges, setAppointmentChanges] = React.useState({})  \r\n\r\n  React.useEffect(()=>{\r\n    resService.getAll().then(res=> {\r\n      setData(res)});\r\n  },[])\r\n\r\n  const onAddedAppointmentChange = (addedAppointment:any)=> {\r\n    setAddedAppointment(addedAppointment)\r\n  }\r\n  const onEditingAppointmentChange = (editingAppointment:any) =>{\r\n    setEditingAppointment(editingAppointment);\r\n  }\r\n  const changeAppointmentChanges = (appointmentChanges:any) =>{\r\n    setAppointmentChanges(appointmentChanges)\r\n  }\r\n\r\n  const commitChanges = (props:ChangeSet) =>{\r\n    const {added, changed, deleted} = props\r\n      if (added) {\r\n        resService.create(added as ReservationsAttributes).then(res =>(setData(data.concat(res))));\r\n      }\r\n      if (changed) {\r\n        setData(data.map(appointment => (\r\n          changed[appointment.id||1] ? { ...appointment, ...changed[appointment.id||1] } : appointment)));\r\n      }\r\n      if (props.deleted !== undefined) {\r\n        setData(data.filter(appointment => appointment.id !== deleted));\r\n      }\r\n  }\r\n\r\n   return (\r\n  <Paper>\r\n    <Scheduler\r\n      data={data}\r\n    >\r\n      <ViewState\r\n        defaultCurrentDate={currentDate}\r\n      />\r\n      <EditingState\r\n            onCommitChanges={commitChanges}\r\n\r\n            addedAppointment={addedAppointment}\r\n            onAddedAppointmentChange={onAddedAppointmentChange}\r\n\r\n            editingAppointment={editingAppointment}\r\n            onEditingAppointmentChange={onEditingAppointmentChange}\r\n            \r\n            appointmentChanges={appointmentChanges}\r\n            onAppointmentChangesChange={changeAppointmentChanges}\r\n          />\r\n\r\n      <MonthView\r\n        dayScaleCellComponent={DayScaleCell}\r\n        timeTableCellComponent={TimeTableCell}\r\n      />\r\n      <WeekView\r\n        startDayHour={9}\r\n        endDayHour={19}\r\n      />\r\n      <EditRecurrenceMenu />\r\n      <ConfirmationDialog />\r\n      <Appointments\r\n        appointmentComponent={Appointment}\r\n        appointmentContentComponent={AppointmentContent}\r\n      />\r\n      <Resources\r\n        data={resources}\r\n      />\r\n\r\n      <AppointmentTooltip\r\n        showOpenButton\r\n        showCloseButton\r\n        showDeleteButton\r\n      />\r\n      <Toolbar />\r\n      <DateNavigator />\r\n      <ViewSwitcher />\r\n      <TodayButton />\r\n      <AppointmentForm />\r\n    </Scheduler>\r\n    <Fab\r\n          color=\"secondary\"\r\n          className={classes.addButton}\r\n          // onClick={() => {\r\n          //   this.setState({ editingFormVisible: true });\r\n          //   this.onEditingAppointmentChange(undefined);\r\n          //   this.onAddedAppointmentChange({\r\n          //     startDate: new Date(currentDate).setHours(startDayHour),\r\n          //     endDate: new Date(currentDate).setHours(startDayHour + 1),\r\n          //   });\r\n          // }}\r\n        >\r\n          <AddIcon />\r\n        </Fab>\r\n  </Paper>\r\n)};\r\n\r\nexport default Reservation;","C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\db\\appointments.ts",[],"C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\db\\resources.ts",[],"C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\services\\reservations.ts",["50","51","52"],"import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/status'\r\n\r\nexport interface ReservationsAttributes {\r\n    id?: number;\r\n    title: string;\r\n    location:string;\r\n    startDate: Date;\r\n    endDate: Date;\r\n    notes:string;\r\n  }\r\n  const getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const create = (newObject:ReservationsAttributes) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const update = (id:number, newObject:ReservationsAttributes) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  export default { getAll, create, update }","C:\\Umidjon\\KAIST\\Hacktoberfest\\schedulerFrontend\\scheduler\\src\\components\\schedulerClass.js",[],{"ruleId":"53","severity":1,"message":"54","line":3,"column":25,"nodeType":"55","messageId":"56","endLine":3,"endColumn":57},{"ruleId":"53","severity":1,"message":"54","line":5,"column":1,"nodeType":"57","messageId":"56","endLine":5,"endColumn":15},{"ruleId":"58","severity":1,"message":"59","line":4,"column":14,"nodeType":"60","messageId":"61","endLine":4,"endColumn":21},{"ruleId":"58","severity":1,"message":"62","line":5,"column":75,"nodeType":"60","messageId":"61","endLine":5,"endColumn":91},{"ruleId":"58","severity":1,"message":"63","line":12,"column":22,"nodeType":"60","messageId":"61","endLine":12,"endColumn":30},{"ruleId":"64","severity":1,"message":"65","line":86,"column":40,"nodeType":"66","messageId":"67","endLine":86,"endColumn":50},{"ruleId":"53","severity":1,"message":"54","line":144,"column":22,"nodeType":"55","messageId":"56","endLine":144,"endColumn":27},{"ruleId":"58","severity":1,"message":"68","line":147,"column":23,"nodeType":"60","messageId":"61","endLine":147,"endColumn":37},{"ruleId":"69","severity":1,"message":"70","line":157,"column":54,"nodeType":"71","messageId":"72","endLine":157,"endColumn":57,"suggestions":"73"},{"ruleId":"69","severity":1,"message":"70","line":160,"column":58,"nodeType":"71","messageId":"72","endLine":160,"endColumn":61,"suggestions":"74"},{"ruleId":"69","severity":1,"message":"70","line":163,"column":56,"nodeType":"71","messageId":"72","endLine":163,"endColumn":59,"suggestions":"75"},{"ruleId":"53","severity":1,"message":"54","line":12,"column":18,"nodeType":"55","messageId":"56","endLine":12,"endColumn":23},{"ruleId":"53","severity":1,"message":"54","line":17,"column":18,"nodeType":"55","messageId":"56","endLine":17,"endColumn":55},{"ruleId":"53","severity":1,"message":"54","line":22,"column":18,"nodeType":"55","messageId":"56","endLine":22,"endColumn":66},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionDeclaration","@typescript-eslint/no-unused-vars","'DayView' is defined but never used.","Identifier","unusedVar","'DragDropProvider' is defined but never used.","'useTheme' is defined but never used.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","'setCurrentDate' is assigned a value but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["76","77"],["78","79"],["80","81"],{"messageId":"82","fix":"83","desc":"84"},{"messageId":"85","fix":"86","desc":"87"},{"messageId":"82","fix":"88","desc":"84"},{"messageId":"85","fix":"89","desc":"87"},{"messageId":"82","fix":"90","desc":"84"},{"messageId":"85","fix":"91","desc":"87"},"suggestUnknown",{"range":"92","text":"93"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"92","text":"94"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"95","text":"93"},{"range":"95","text":"94"},{"range":"96","text":"93"},{"range":"96","text":"94"},[5075,5078],"unknown","never",[5190,5193],[5308,5311]]